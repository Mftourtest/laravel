<?php

namespace App\Http\Controllers\Waiter;

use App;
use Illuminate\Http\Request;
use App\Http\Controllers\Controller;
use DB;
use Validator;
use Illuminate\Support\Facades\Input;
use App\Models\PartnerAdmin;
use App\Models\Partner;
use App\Models\FoodArea;
use App\Models\FoodAreaDesk;
use App\Lib\Common\Helper;
use App\Lib\Common\Printer;

class RestaurantController extends Controller
{
    private $lang;
    private $suffix;
    public function __construct(){
        $this->lang = $_GET['lang'];
        App::setLocale($this->lang);
        if($this->lang=="zh_cn"){
            $this->suffix = "";
        }
        elseif($this->lang=="en_us"){
            $this->suffix = "_en";
        }
        else{
            $this->suffix = "_vi";
        }
    }

    //注册账号
    public function index()
    {
        return view('waiter/index')->with("lang",$this->lang);

    }

    //添加账号
    public function store()
    {
        $username = Input::get('account');
        $password = Input::get('password');
        if($username && $password){
            DB::table('partner_admin')->insert(['account' => $username,'password' => $password,'waiter_id' => 2,]);
        }
        return redirect('/');
    }

    //带验证登陆
    public function login_validator()
    {
        //$lang = $_GET['lang'];
        if($input = Input::all()){
            //验证提交的数据  
            $rules = [  
                'account'=>'required|between:1,20',  
                'password'=>'required|between:1,50'
            ];  
            $message = [  
                'account.required'=>'账号不能为空！',  
                'account.between'=>'账号必须在1-20位之间！',  
                'password.required'=>'密码不能为空！',  
                'password.between'=>'密码必须在1-50位之间！'
            ];  
            $validator = Validator::make($input,$rules,$message);  
            //表单验证  
            if($validator->passes()){  
                //用户验证  
                $admininfo = PartnerAdmin::where('account',$input['account'])->first(); //查询数据库用户名是否存在
                if(!$admininfo){  
                    return back()->with('msg','用户不存在！');  
                }else{  
                    $psw = $admininfo->password;
                    if($psw!=$input['password']){  
                        return back()->with('msg','密码错误！');  
                    } 
                    else{
                        $pinfo = Partner::find($admininfo->partner_id);
                        session(['partner_id'=>$admininfo->partner_id,'partner_name'=>$pinfo->title]); 
                        return redirect('waiter/table?lang='.$this->lang);  

                    } 
               }  
            }else{  
                return back()->withErrors($validator);  
            }  
        }
        else{
            return view('waiter/index')->with("lang",$lang);;  
        }
    }

    //新增餐厅房间信息
    public function add_room()
    {
        $input = Input::all();
        if($input){
            DB::table('food_area')->insert(['partner_id' => $input['partner_id'],'room_name' => $input['roomname'],'room_name_en'=>$input['roomname_en'],'room_name_vi'=>$input['roomname_vi']]);
        }
        return redirect('desk_add');
    }

    //新增餐厅区域桌位信息
    public function add_desk()
    {
        $input = Input::all();
        $p_id = session('partner_id');
        $desk = DB::table('food_area_desk')->where('partner_id',$p_id)->orderby('id','desc')->first(); //查询该商户最新桌位记录
        if($desk){
            $desk_sn = $desk->desk_sn;
        }
        else{
            $desk_sn = 0 ;
        }
        if($input){
            for($i=0;$i<$input['number'];$i++){
                DB::table('food_area_desk')->insert(['team_id' =>2211,'partner_id' =>$p_id,'desk_sn'=>$desk_sn+1+$i,'area_id'=>5]);
            }
        }
        return redirect('table');
    }

    //获取餐厅区域桌位信息
    public function desk_info()
    {
        $p_id = session('partner_id');
        //$p_name = session('partner_name');
        if($p_id){
            $areainfos = FoodArea::where('partner_id',$p_id)->get()->toArray();
            $deskinfos = DB::table('food_area_desk')->join('food_desk_state', function($join)  
            {  
                $join->on('food_area_desk.desk_state', '=', 'food_desk_state.id');  
            })->select('*')  
              ->where('partner_id',$p_id)                 
              ->orderBy('food_area_desk.desk_sn', 'asc')  
              ->get()->toArray();   
        }
        $deskarr = [];
        foreach ($deskinfos as $key => $deskinfo) {
            $deskarr[$key]['desk_sn'] = $deskinfo->desk_sn;
            $deskarr[$key]['state_name'] = $deskinfo->state_name;
            $deskarr[$key]['state_name_en'] = $deskinfo->state_name_en;
            $deskarr[$key]['state_name_vi'] = $deskinfo->state_name_vi;
            $deskarr[$key]['desk_state'] = $deskinfo->desk_state;
            $deskarr[$key]['area_id'] = $deskinfo->area_id;
        }
        return view('waiter/table')->with('areainfos',$areainfos)->with('suffix',$this->suffix)
        ->with('deskinfos',$deskarr)->with('lang',$this->lang);
                                    
    }           

    //查询该餐厅所有的菜品分类和菜品
    public function food_info()
    {
        $p_id = session('partner_id');
        $desk_sn = $_GET['desk_sn'];
        $arr = [];
        $cateinfo = DB::table('food_cate')->where('partner_id',$p_id)->get()->toArray();
        $arr = $this->objectToArray($cateinfo); //将对象转为数组
        $categorys = [];
        $data = array();
        $brr = [];
        $prr = [];
        foreach($cateinfo as $i=>$cate){
            $categorys[$i] =  DB::table('food')->where('cate_id',$cate->id)->get()->toArray();
            $brr = $this->objectToArray($categorys[$i]);
                foreach ( $brr as $j => $food) {
                    $data[$i][$j]['id'] = $food['id'];
                    $data[$i][$j]['title'.$this->suffix] = $food['title'.$this->suffix];
                    $data[$i][$j]['price'] = $food['price'];
                    $data[$i][$j]['display_order'] = $food['display_order'];
                    $data[$i][$j]['pack'] = $food['pack'];
                    if($food['pack']==1){                 
                        $prr = DB::table('food_packages')->where('food_id',$food['id'])->get()->toArray();
                        $data[$i][$j]['packages'] = $this->objectToArray($prr);
                    }
                }
        }
        DB::table('food_area_desk')->where('partner_id',$p_id)->where('desk_sn',$desk_sn)->update(['desk_state'=>2]); //点餐中
        return view('waiter/order')->with('cateinfo',$arr)->with('data',$data)
                                   ->with('suffix',$this->suffix)
                                   ->with('desk_sn',$desk_sn) ->with('lang',$this->lang);
    }

    //服务员将购物车内的菜品显示在下单页
    public function placeorder_info()
    {
        $p_id = session('partner_id');
        $input = Input::all();
        $desk_sn = $input['desk_sn'];
        $goods = $input['goods'];
        $allnum = 0;
        $allprice = 0;
        $food_num = 0; //几道菜
        foreach($input['goods'] as $good){
            $allnum = $good['num'] + $allnum;
            $allprice = $good['price']*$good['num'] + $allprice;
            $food_num += 1;
        } 
        return view('waiter/placeorder')->with('lang',$this->lang)
        ->with('desk_sn',$desk_sn)
        ->with('goods',$goods)
        ->with(['allnum'=>$allnum,'allprice'=>$allprice,'food_num'=>$food_num]);
        //->with('allprice',$allprice);
    }

    //服务员确认下单
    public function place_order()
    {
        $p_id = session('partner_id');
        $input = Input::all();
        $desk_sn = $input['desk_sn'];
        $deskinfo = DB::table('food_area_desk')->where('partner_id',$p_id)->where('desk_sn',$desk_sn)->first();
        $time = time();
        $goods = $input['goods'];
        foreach($goods as $i=>$good){
             //判断food_id里有没有下滑线
            if(strpos($good['id'],'_')){
                $arr = explode('_',$good['id']); //下滑线两端字符取值
                $good_id = $arr[0];
                $pack_id = $arr[1];
            }
            else{
                $good_id = $good['id'];
                $pack_id = 0;
            }
            DB::table('order_temp')
            ->insert(['partner_id' => $p_id,
                      'desk_sn' => $deskinfo->id,
                      'food_id' => $good_id,
                      'package_id' => $pack_id,
                      'number' => $good['num'],
                      'price' => $good['price'],
                      'create_time' => $time,
                      'remark' => $input['remark']
                      ]);
            $foodinfo = DB::table('food')->where('id',$good_id)->first();
            $orderTeam[$i] = [
                'price' => $good['price'],
                'quantity' => $good['num'],
                'package' => serialize([
                    'desk_sn' => $desk_sn,
                    'title_zh_cn' => $foodinfo->title,
                    'title_en_us' => $foodinfo->title_en,
                    'title_vi' => $foodinfo->title_vi,
                    'pr_sn' =>  helper::getPrSnByCateId($foodinfo->cate_id)
                ])
                ];
        }
        $update_row = DB::table('food_area_desk')->where('id',$deskinfo->id)->update(['desk_state'=>3]);
        //打印菜单
        $partner = DB::table('partner')->where('id',$p_id)->first();
        $order['remark'] = $input['remark'];
        Printer::singlePrint($partner, $order, $orderTeam);
        if($update_row){
            return view('waiter/over')->with('lang',$this->lang);
        }
        else{
            echo "更新数据失败";
        }
    }

    //将桌位状态变为空闲
    public function empty_desk()
    {
        $p_id = session('partner_id');
        $desk_sn = $_GET['desk_sn'];
        $update_row = DB::table('food_area_desk')->where('partner_id',$p_id)->where('desk_sn',$desk_sn)->update(['desk_state'=>1]);
        if($update_row){
            return redirect('waiter/table?lang='.$this->lang);
        }
        else{
            echo "更新数据失败";
        }
    }

    //未结账页需要获取的数据
    public function non_checkout()
    {
        $p_id = session('partner_id');
        $desk_sn = $_GET['desk_sn'];
        $deskinfo = DB::table('food_area_desk')->where('partner_id',$p_id)->where('desk_sn',$desk_sn)->first();
        $order_temp = DB::table('order_temp')->where('partner_id',$p_id)
                                             ->where('desk_sn',$deskinfo->id)
                                             ->where('order_id',0)->get();
        $pinfo = Partner::find($p_id);
        $total_price = 0;  //原总价
        foreach($order_temp as $v){
            $total_price =  $v->price * $v->number + $total_price;
        }
        $srv_price = $total_price * $pinfo->fee_srv; //服务费
        $tax_price = $total_price * $pinfo->fee_tax; //税费
        $discount_price = $total_price * (1 - $pinfo->discount);    //打折要减去的价格
        $last_price = intval($total_price - $discount_price + $srv_price + $tax_price);    //最终应付价格
        return view('waiter/reckoning')->with("lang",$this->lang)
            ->with('desk_sn',$desk_sn)->with(['total_price'=>$total_price,'discount_price'=>$discount_price,'last_price'=>$last_price])
            ->with(['srv_price'=>$srv_price,'tax_price'=>$tax_price]);
    }

    //现金支付
    public function cash()
    {
        $desk_sn = $_GET['desk_sn'];
        $last_price = $_GET['last_price'];
        return view('waiter/cash')->with('lang',$this->lang)
            ->with('desk_sn',$desk_sn)
            ->with('last_price',$last_price);
    }

    //确认支付
    public function confirm_payment()
    {
        $p_id = session('partner_id');
        $desk_sn = $_GET['desk_sn'];
        $deskinfo = DB::table('food_area_desk')->where('partner_id',$p_id)->where('desk_sn',$desk_sn)->first();
        DB::table('order_temp')->where('desk_sn',$deskinfo->id)->update(['order_id'=>1]);
        $update_row = DB::table('food_area_desk')->where('partner_id',$p_id)->where('desk_sn',$desk_sn)->update(['desk_state'=>1]);
        if($update_row){
            return redirect('waiter/table?lang='.$this->lang);
        }
        else{
            echo "更新数据失败";
        }
    }

    //选择代金卷
    public function coupon()
    {
        $desk_sn = $_GET['desk_sn'];
        $coupon_id = Input::get('coupon_id');
        $coupon_info = DB::table('coupon')->where('id',$coupon_id)->get()->toArray();
        return view('waiter/coupon')->with('lang',$this->lang)->with('coupon_id',$coupon_id)
            ->with('desk_sn',$desk_sn);
        //dd($coupon_info);
    }

    //微信支付
    public function wechat()
    {
        $desk_sn = $_GET['desk_sn'];
        return view('waiter/wechat')->with("lang",$this->lang)
            ->with('desk_sn',$desk_sn);
    }

    //验证团购券
    public function voucher()
    {
        $desk_sn = $_GET['desk_sn'];
        return view('waiter/voucher')->with("lang",$this->lang)
            ->with('desk_sn',$desk_sn);
    }

    //整体打折
    public function discount()
    {
        $desk_sn = $_GET['desk_sn'];
        return view('waiter/discount')->with("lang",$this->lang)
            ->with('desk_sn',$desk_sn);
    }

     /**
     * 对象转换数组
     *
     * @param $e StdClass对象实例
     * @return array|void
     */
     public function objectToArray($e)
     {
         $e = (array)$e;
         foreach ($e as $k => $v) {
             if (gettype($v) == 'resource') return;
             if (gettype($v) == 'object' || gettype($v) == 'array')
                 $e[$k] = (array)$this->objectToArray($v);
         }
         return $e;
     }

    

    public function test(Request $request)
    {
       // $id = 319049142889;
       // $op = 'foods_team';
       // $res = Helper::voucher($id, $op, $request->getClientIp());
       $coupon_id = 551477681977;
       $arr = DB::table('coupon')->where('id',$coupon_id)->first();
       $coupon_info = $this->objectToArray($arr);
       $now = time();
       if($coupon_info['consume']=='N' && $now<=$coupon_info['expire_time']){
            $msg =  "Success";
            $expire_time = date("Y-m-d H:i:s",$coupon_info['expire_time']);
            $sql = "SELECT o.id, pp.packagename,pp.packagenameen, t.title,t.titleen, ot.quantity 
                FROM `order` o,`orderteam` ot,`product_price` pp,`team` t,`coupon` c 
                WHERE c.order_id=ot.id and c.team_id=t.id and ot.orderid=o.id and pp.proid=c.team_id and ot.packageid=pp.id and
                      c.id=".$coupon_id;
            $order = DB::select($sql);   
         }
        elseif(!empty($coupon_info['id']) && $coupon_info['consume']=='Y'){
            $msg =  $_LANG['x_biz_have_use'];
        }
        elseif(!empty($coupon_info['id']) && $now>$coupon_info['expire_time']){
            $msg = $_LANG['x_biz_have_expired'];
        }
        else{
            $msg =  $_LANG['x_biz_check_no'];
        }
            dd($order);
    }
    
}
